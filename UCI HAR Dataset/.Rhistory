ls()
library(datasets)
data(iris)
swirl()
library(swirl)
swirl()
0
exit()
quit()
library(datasets)
data(cars)
with(cars, plot(speed, dist))
library(lattice)
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
with(cars, plot(speed, dist,
pch = 22, # plotting character
# lty # line type
# lwd # line width
col = "purple", # color
xlab = "Distance", # x-axis label
ylab = "Speed" # y-axis label
))
x <- rnorm (100)
hist (x)
y <- rnorm (100)
plot(x, y)
par (mar = c(2, 2, 2, 2))
plot(x, y)
par (mar = c(4, 4, 2, 2))  ## change the margins
plot(x, y)
par (mar = c(4.5, 4.5, 2, 2))  ## change the margins
plot(x, y)
plot(x, y, pch = 20)
plot(x, y, pch = 19)
plot(x, y, pch = 2)
plot(x, y, pch = 3)
plot(x, y, pch = 4)
plot(x, y, pch = 20)
plot(x, y, pch = 21)
plot(x, y, pch = 20)
plot(x, y, pch = 22,
col = "red",
bg = "green")
plot(x, y, pch = 23,
col = "red",
bg = "green")
plot(x, y, pch = 23, ## example(points) for examples
col = "red",
bg = "blue")
title("My Scatterplot")
legend("topleft", legend = "Data", pch = 23)
x <- rnorm (100)
y <- x + rnorm (100)
g <- gl(2, 50, labels = c("M", "F"))
plot(x, y, type = "n")
poihnts(x[g == "M"], y[g == "M"], col = "green")
points(x[g == "M"], y[g == "M"], col = "green")
points(x[g == "F"], y[g == "F"], col = "blue", pch = 19)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
play()
rm(cars)
rm(mpg, state, fname, g, high, low)
rm(plotArea, x, y)
nxt()
head(pollution)
dim(pollution)
play()
summary(pollution$pm25)
nxt()
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline (h =12)
hist(ppm, col = "green")
rug(ppm)
high
0
exit
exit()
quit()
library(swirl)
swirl()
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
red
reg
barplot(reg, col = "wheat", main = "Number of Countries in Each Region")
play()
par(mar = c(5, 4, 2, 2))
barplot(reg, col = "wheat", main = "Number of Countries in Each Region")
nxt()
barplot(reg, col = "wheat", main = "Number of Countries in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow = c(2,1), mar = c(4, 4, 2, 1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col)
hist(subset(pollution, region == "west")$pm25, col = 'green')
quit()
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(), user='genome',
host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user='genome',
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
hg19 <- dbConnect(MySQL(), user = "genome", db = "hg19",
host = "genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2") ## read the table
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10); dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
?BiocUpgrade
biocLite("BiocUpgrade")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B = array(seq(0.1, 2.0, by=0.1), dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L, seq(0,1, length.out=5), c("ab", "cde", "fghi", "a", "s"),
stringsAsFactors = F)
h5write(df, "example.h5", "df")
h5ls("example.h5")
library(httr)
oauth_endpoints("github")
oe <- oauth_endpoints("github")
oe
class(oe)
myapp <- oauth_app("github",     ## name of the provider application
key ="13c8eaf69cfc55a754a5",
secret = "615f0b33dedf20ab25a76c750fd00fb46eb09446")
class(myapp)
str(oe)
str(myapp)
str(github_token)
github_token <- oauth2.0_token(oe, myapp)
str(github_token)
gtoken <- config(token = github_token)
str(gtoken)
req <- GET("https://api.github.com/users/jtleek/repos", ## url I want to access
gtoken)   ## authentication to access github
req
stop_for_status(req)
content(req)
req
library(jsonlite)
jsonData <- fromJSON(req)
json1 <- content(req)    ## view contents of the request
library(jsonlite)
json2 <- fromJSON(toJSON(json1))
names(json2)
head(json2)
req
head(json2)
names(json2)
json2$created_at
names(json2)
json2[5,1]
str(json2)
class(json2)
View(json2)
names(json2)
head(json2$id)
head(json2$name)
any(json$name == "datasharing")
any(json2$name == "datasharing")
which(json2$name == "datasharing")
json$name[11]
json2$name[11]
names(json2)
json2$created_at[11]
setwd("/Users/Natasha/Google Drive/Coursera/homework/data/UCI HAR Dataset/train")
train_id <- read.table("subject_train.txt", header = F)
View(train_id)
setwd("/Users/Natasha/Google Drive/Coursera/homework/data/UCI HAR Dataset/")
train_id <- read.table("train/subject_train.txt", header = F)
test_id <- read.table("test/subject_test.txt", header = F)
train_label <- read.table("train/y_train.txt", header = F)
test_label <- read.table("test/y_test.txt", header = F)
str(train_label)
factor(train_label)
as.factor(train_label)
factor(train_label$V1)
factor(train_label$V1, labels = c("walking", "upstairs", "downstairs",
"sitting", "standing", "laying"))
train_label <- factor(train_label$V1, labels = c("walking",
"upstairs",
"downstairs",
"sitting",
"standing",
"laying"))
test_label <- factor(test_label$V1, labels = c("walking",
"upstairs",
"downstairs",
"sitting",
"standing",
"laying"))
train_feature <- read.table("train/X_train.txt", header = F)
View(train_feature)
features <- read.table("features.txt", header = F)
View(features)
names(train_feature) <- features$V2
test_feature <- read.table("test/X_test.txt", header = F)
names(test_feature) <- features$V2
body_acc_x <- read.table("train/Inertial Signals/body_acc_x_train.txt", header = F)
train_body_acc_x <- read.table("train/Inertial Signals/body_acc_x_train.txt", header = F)
train_body_acc_y <- read.table("train/Inertial Signals/body_acc_y_train.txt", header = F)
train_body_acc_z <- read.table("train/Inertial Signals/body_acc_z_train.txt", header = F)
train_total_acc_x <- read.table("train/Inertial Signals/total_acc_x_train.txt", header = F)
train_total_acc_y <- read.table("train/Inertial Signals/total_acc_y_train.txt", header = F)
train_total_acc_z <- read.table("train/Inertial Signals/total_acc_z_train.txt", header = F)
train_body_gyro_x <- read.table("train/Inertial Signals/body_gyro_x_train.txt", header = F)
train_body_gyro_y <- read.table("train/Inertial Signals/body_gyro_y_train.txt", header = F)
train_body_gyro_z <- read.table("train/Inertial Signals/body_gyron_z_train.txt", header = F)
train_body_gyro_z <- read.table("train/Inertial Signals/body_gyro_z_train.txt", header = F)
View(train_body_acc_x)
View(train_feature)
setwd("/Users/Natasha/Google Drive/Coursera/homework/data/UCI HAR Dataset/")
features <- read.table("features.txt", header = F)
train_id <- read.table("train/subject_train.txt", header = F)
train_label <- read.table("train/y_train.txt", header = F)
train_label <- factor(train_label$V1, labels = c("walking",
"upstairs",
"downstairs",
"sitting",
"standing",
"laying"))
train_feature <- read.table("train/X_train.txt", header = F)
names(train_feature) <- features$V2
test_id <- read.table("test/subject_test.txt", header = F)
test_label <- read.table("test/y_test.txt", header = F)
test_label <- factor(test_label$V1, labels = c("walking",
"upstairs",
"downstairs",
"sitting",
"standing",
"laying"))
test_feature <- read.table("test/X_test.txt", header = F)
names(test_feature) <- features$V2
train_data <- cbind(train_id, train_label, train_feature)
View(train_data)
train_data <- cbind("id" = train_id, train_label, train_feature)
train_data <- cbind("id" = train_id, train_label, train_feature)
library(dplyr)
train_data_select <- select(train_data, train_id, train_label, contains("mean"), contains("std"))
train_data <- cbind(train_id, train_label, train_feature)
train_data_select <- select(V1, train_id, train_label, contains("mean"), contains("std"))
names(train_id) <- c("id")
View(test_id)
View(train_id)
names(train_label) <- c("activity")
train_data <- cbind(train_id, train_label, train_feature)
train_label
train_label <- read.table("train/y_train.txt", header = F)
train_label <- factor(train_label$V1, labels = c("walking",
"upstairs",
"downstairs",
"sitting",
"standing",
"laying"))
train_data <- cbind(train_id, train_label, train_feature)
train_data$activity <- train_data$train_label
View(train_data)
features <- read.table("features.txt", header = F)
train_id <- read.table("train/subject_train.txt", header = F)
names(train_id) <- c("id")
train_label <- read.table("train/y_train.txt", header = F)
train_label <- factor(train_label$V1, labels = c("walking",
"upstairs",
"downstairs",
"sitting",
"standing",
"laying"))
train_feature <- read.table("train/X_train.txt", header = F)
names(train_feature) <- features$V2
train_data <- cbind(train_id, train_label, train_feature)
train_data_select <- select(train_data, train_id, train_label, contains("mean"), contains("std"))
train_data_select <- select(train_data, id, train_label, contains("mean"), contains("std"))
train_data_select <- select(train_data, id, train_label)
# Summarizing data for the 72hpf ace experiment
## load libraries
library(ggplot2)
library(dplyr)
## set working directory
setwd("/Users/Natasha/Google Drive/Burns_Lab_Projects/NPL_photoconversion/72hpf_ace/")
## make data table
summary_data <- data.frame("genotype" = c("ACE", "ACE", "CTRL", "CTRL"),
"phenotype" = c("defective", "normal", "defective", "normal"),
"count" = c(15, 10, 0, 76))
summary_data <- summary_data %>% mutate(
percentage = c(15 / 25, 10 / 25, 0, 1))
## make a chart
g <- ggplot(data = summary_data, aes(x = genotype, y = percentage, fill = phenotype)) +
geom_bar(stat= "identity") +
scale_fill_manual(name = "Phenotype", values=c("black", "gray")) +
ggtitle("72hpf ace data") +
theme_light() +
theme(plot.title = element_text(face = "bold")) +
xlab("Genotype") +
ylab("Percentage") +
scale_x_discrete(breaks = c("ACE", "CTRL"),
labels=c("ace n=25", "ctrl n=76"))
g
jpeg(filename = "summary.jpg")
g
dev.off()
# Summarizing data for the 72hpf ace experiment
## load libraries
library(ggplot2)
library(dplyr)
## set working directory
setwd("/Users/Natasha/Google Drive/Burns_Lab_Projects/NPL_photoconversion/72hpf_ace/")
## make data table
summary_data <- data.frame("genotype" = c("ACE", "ACE", "CTRL", "CTRL"),
"phenotype" = c("defective", "normal", "defective", "normal"),
"count" = c(15, 10, 0, 76))
summary_data <- summary_data %>% mutate(
percentage = c(15 / 25, 10 / 25, 0, 1))
## make a chart
g <- ggplot(data = summary_data, aes(x = genotype, y = percentage, fill = phenotype)) +
geom_bar(stat= "identity") +
scale_fill_manual(name = "Phenotype", values=c("gray", "black")) +
ggtitle("72hpf ace data") +
theme_light() +
theme(plot.title = element_text(face = "bold")) +
xlab("Genotype") +
ylab("Percentage") +
scale_x_discrete(breaks = c("ACE", "CTRL"),
labels=c("ace n=25", "ctrl n=76"))
g
jpeg(filename = "summary.jpg")
g
dev.off()
str(summary_data)
factor(summary_data$genotype, levels = c("CTRL", "ACE"))
summary$data$genotype <- factor(summary_data$genotype, levels = c("CTRL", "ACE"))
summary_data$genotype <- factor(summary_data$genotype, levels = c("CTRL", "ACE"))
g <- ggplot(data = summary_data, aes(x = genotype, y = percentage, fill = phenotype)) +
geom_bar(stat= "identity") +
scale_fill_manual(name = "Phenotype", values=c("gray", "black")) +
ggtitle("72hpf ace data") +
theme_light() +
theme(plot.title = element_text(face = "bold")) +
xlab("Genotype") +
ylab("Percentage") +
scale_x_discrete(breaks = c("ACE", "CTRL"),
labels=c("ace n=25", "ctrl n=76"))
g
jpeg(filename = "summary.jpg")
g
dev.off()
features <- read.table("features.txt", header = F)
train_id <- read.table("train/subject_train.txt", header = F)
names(train_id) <- c("id")
train_label <- read.table("train/y_train.txt", header = F)
train_label <- factor(train_label$V1, labels = c("walking",
"upstairs",
"downstairs",
"sitting",
"standing",
"laying"))
train_feature <- read.table("train/X_train.txt", header = F)
names(train_feature) <- features$V2
train_data <- cbind(train_id, train_label, train_feature)
train_data_select <- select(train_data, id, train_label, contains("mean"), contains("std"))
features <- read.table("features.txt", header = F)
train_id <- read.table("train/subject_train.txt", header = F)
names(train_id) <- c("id")
train_label <- read.table("train/y_train.txt", header = F)
train_label <- factor(train_label$V1, labels = c("walking",
"upstairs",
"downstairs",
"sitting",
"standing",
"laying"))
train_feature <- read.table("train/X_train.txt", header = F)
names(train_feature) <- features$V2
train_data <- cbind(train_id, train_label, train_feature)
setwd("/Users/Natasha/Google Drive/Coursera/homework/data/UCI HAR Dataset/")
features <- read.table("features.txt", header = F)
train_id <- read.table("train/subject_train.txt", header = F)
names(train_id) <- c("id")
train_label <- read.table("train/y_train.txt", header = F)
train_label <- factor(train_label$V1, labels = c("walking",
"upstairs",
"downstairs",
"sitting",
"standing",
"laying"))
train_feature <- read.table("train/X_train.txt", header = F)
names(train_feature) <- features$V2
train_data <- cbind(train_id, train_label, train_feature)
train_data_select <- select(train_data, id, train_label, contains("mean"), contains("std"))
